package io.nbs.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class CertificationRegistration extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ADDCERTIFICATION = "addCertification";

    public static final String FUNC_ADDTRANSACTIONID = "addTransactionId";

    public static final String FUNC_CERTIFICATIONS = "certifications";

    public static final String FUNC_CHARGECREDIT = "chargeCredit";

    public static final String FUNC_CREDITADDRESS = "creditAddress";

    public static final String FUNC_CREDITS = "credits";

    public static final String FUNC_GETCERTIFICATION = "getCertification";

    public static final String FUNC_GETCERTIFICATIONBYCERTNUM = "getCertificationByCertNum";

    public static final String FUNC_GETCERTIFICATIONBYID = "getCertificationByID";

    public static final String FUNC_GETCREDIT = "getCredit";

    public static final String FUNC_GETISSUER = "getIssuer";

    public static final String FUNC_ID = "id";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISSUERREGISTRATIONADDRESS = "issuerRegistrationAddress";

    public static final String FUNC_MAPBYCERTNUM = "mapByCertNum";

    public static final String FUNC_MAPBYID = "mapById";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REVOKE = "revoke";

    public static final String FUNC_REVOKEBYID = "revokeById";

    public static final String FUNC_SETISSUERREGISTRATIONADDRESS = "setIssuerRegistrationAddress";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected CertificationRegistration(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CertificationRegistration(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CertificationRegistration(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CertificationRegistration(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addCertification(String _hash, String _certNum, BigInteger _expireDate, String _version, String _desc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDCERTIFICATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_hash), 
                new org.web3j.abi.datatypes.Utf8String(_certNum), 
                new org.web3j.abi.datatypes.generated.Uint256(_expireDate), 
                new org.web3j.abi.datatypes.Utf8String(_version), 
                new org.web3j.abi.datatypes.Utf8String(_desc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addTransactionId(String _hash, String _txid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTRANSACTIONID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_hash), 
                new org.web3j.abi.datatypes.Utf8String(_txid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>> certifications(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CERTIFICATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>>(function,
                new Callable<Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>>() {
                    @Override
                    public Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (BigInteger) results.get(10).getValue(), 
                                (String) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> chargeCredit(String addr, BigInteger credit) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHARGECREDIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr), 
                new org.web3j.abi.datatypes.generated.Uint256(credit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> creditAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CREDITADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> credits(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CREDITS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Certification> getCertification(String hash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCERTIFICATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(hash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Certification>() {}));
        return executeRemoteCallSingleValueReturn(function, Certification.class);
    }

    public RemoteFunctionCall<Certification> getCertificationByCertNum(String certNum) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCERTIFICATIONBYCERTNUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(certNum)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Certification>() {}));
        return executeRemoteCallSingleValueReturn(function, Certification.class);
    }

    public RemoteFunctionCall<Certification> getCertificationByID(BigInteger ID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCERTIFICATIONBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(ID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Certification>() {}));
        return executeRemoteCallSingleValueReturn(function, Certification.class);
    }

    public RemoteFunctionCall<BigInteger> getCredit(String addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCREDIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Issuer> getIssuer(String issuer) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETISSUER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, issuer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Issuer>() {}));
        return executeRemoteCallSingleValueReturn(function, Issuer.class);
    }

    public RemoteFunctionCall<BigInteger> id() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> issuerRegistrationAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSUERREGISTRATIONADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>> mapByCertNum(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAPBYCERTNUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>>(function,
                new Callable<Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>>() {
                    @Override
                    public Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (BigInteger) results.get(10).getValue(), 
                                (String) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>> mapById(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAPBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>>(function,
                new Callable<Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>>() {
                    @Override
                    public Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<BigInteger, String, String, String, BigInteger, BigInteger, Boolean, String, String, String, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (BigInteger) results.get(10).getValue(), 
                                (String) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revoke(String hash, String revokerName) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(hash), 
                new org.web3j.abi.datatypes.Utf8String(revokerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeById(BigInteger ID, String revokerName) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(ID), 
                new org.web3j.abi.datatypes.Utf8String(revokerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setIssuerRegistrationAddress(String _issuerRegistrationAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETISSUERREGISTRATIONADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _issuerRegistrationAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CertificationRegistration load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CertificationRegistration(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CertificationRegistration load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CertificationRegistration(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CertificationRegistration load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CertificationRegistration(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CertificationRegistration load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CertificationRegistration(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CertificationRegistration> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CertificationRegistration.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CertificationRegistration> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CertificationRegistration.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CertificationRegistration> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CertificationRegistration.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CertificationRegistration> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CertificationRegistration.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Certification extends DynamicStruct {
        public BigInteger id;

        public String certNum;

        public String hash;

        public String issuer;

        public BigInteger expireDate;

        public BigInteger createdAt;

        public Boolean isRevoked;

        public String version;

        public String description;

        public String revokerName;

        public BigInteger revokedAt;

        public String txid;

        public Certification(BigInteger id, String certNum, String hash, String issuer, BigInteger expireDate, BigInteger createdAt, Boolean isRevoked, String version, String description, String revokerName, BigInteger revokedAt, String txid) {
            super(new org.web3j.abi.datatypes.generated.Uint256(id),new org.web3j.abi.datatypes.Utf8String(certNum),new org.web3j.abi.datatypes.Utf8String(hash),new org.web3j.abi.datatypes.Address(issuer),new org.web3j.abi.datatypes.generated.Uint256(expireDate),new org.web3j.abi.datatypes.generated.Uint256(createdAt),new org.web3j.abi.datatypes.Bool(isRevoked),new org.web3j.abi.datatypes.Utf8String(version),new org.web3j.abi.datatypes.Utf8String(description),new org.web3j.abi.datatypes.Utf8String(revokerName),new org.web3j.abi.datatypes.generated.Uint256(revokedAt),new org.web3j.abi.datatypes.Utf8String(txid));
            this.id = id;
            this.certNum = certNum;
            this.hash = hash;
            this.issuer = issuer;
            this.expireDate = expireDate;
            this.createdAt = createdAt;
            this.isRevoked = isRevoked;
            this.version = version;
            this.description = description;
            this.revokerName = revokerName;
            this.revokedAt = revokedAt;
            this.txid = txid;
        }

        public Certification(Uint256 id, Utf8String certNum, Utf8String hash, Address issuer, Uint256 expireDate, Uint256 createdAt, Bool isRevoked, Utf8String version, Utf8String description, Utf8String revokerName, Uint256 revokedAt, Utf8String txid) {
            super(id,certNum,hash,issuer,expireDate,createdAt,isRevoked,version,description,revokerName,revokedAt,txid);
            this.id = id.getValue();
            this.certNum = certNum.getValue();
            this.hash = hash.getValue();
            this.issuer = issuer.getValue();
            this.expireDate = expireDate.getValue();
            this.createdAt = createdAt.getValue();
            this.isRevoked = isRevoked.getValue();
            this.version = version.getValue();
            this.description = description.getValue();
            this.revokerName = revokerName.getValue();
            this.revokedAt = revokedAt.getValue();
            this.txid = txid.getValue();
        }
    }

    public static class Issuer extends DynamicStruct {
        public BigInteger id;

        public String name;

        public String regnum;

        public String description;

        public String category;

        public String addr;

        public String metaDataUrl;

        public Boolean isActive;

        public BigInteger createdAt;

        public BigInteger updatedAt;

        public Issuer(BigInteger id, String name, String regnum, String description, String category, String addr, String metaDataUrl, Boolean isActive, BigInteger createdAt, BigInteger updatedAt) {
            super(new org.web3j.abi.datatypes.generated.Uint256(id),new org.web3j.abi.datatypes.Utf8String(name),new org.web3j.abi.datatypes.Utf8String(regnum),new org.web3j.abi.datatypes.Utf8String(description),new org.web3j.abi.datatypes.Utf8String(category),new org.web3j.abi.datatypes.Address(addr),new org.web3j.abi.datatypes.Utf8String(metaDataUrl),new org.web3j.abi.datatypes.Bool(isActive),new org.web3j.abi.datatypes.generated.Uint256(createdAt),new org.web3j.abi.datatypes.generated.Uint256(updatedAt));
            this.id = id;
            this.name = name;
            this.regnum = regnum;
            this.description = description;
            this.category = category;
            this.addr = addr;
            this.metaDataUrl = metaDataUrl;
            this.isActive = isActive;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
        }

        public Issuer(Uint256 id, Utf8String name, Utf8String regnum, Utf8String description, Utf8String category, Address addr, Utf8String metaDataUrl, Bool isActive, Uint256 createdAt, Uint256 updatedAt) {
            super(id,name,regnum,description,category,addr,metaDataUrl,isActive,createdAt,updatedAt);
            this.id = id.getValue();
            this.name = name.getValue();
            this.regnum = regnum.getValue();
            this.description = description.getValue();
            this.category = category.getValue();
            this.addr = addr.getValue();
            this.metaDataUrl = metaDataUrl.getValue();
            this.isActive = isActive.getValue();
            this.createdAt = createdAt.getValue();
            this.updatedAt = updatedAt.getValue();
        }
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
